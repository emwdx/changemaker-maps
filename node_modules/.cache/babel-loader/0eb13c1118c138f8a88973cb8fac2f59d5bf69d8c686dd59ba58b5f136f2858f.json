{"ast":null,"code":"var _jsxFileName = \"/Users/eweinberg/Documents/changemaker-maps/src/components/ProjectMap.js\",\n  _s = $RefreshSig$();\n///src/components/ProjectMap.js\n\nimport React, { useState } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport Sidebar from './Sidebar';\nimport Column from './Column';\nimport blankCards from '../util/BlankCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectMap = () => {\n  _s();\n  const [showModal, setShowModal] = useState(false);\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardsInMap, setCardsInMap] = useState([]);\n  const onAddCard = templateCard => {\n    // Assuming templateCard contains the 'stage' and 'title' properties from the clicked card\n    setCurrentCard({\n      ...templateCard,\n      id: `new-${Date.now()}`\n    }); // Generate a temporary unique ID\n    setShowModal(true);\n  };\n  const saveNewCard = newCardDetails => {\n    setCardsInMap([...cardsInMap, {\n      ...currentCard,\n      ...newCardDetails,\n      id: `card-${cardsInMap.length + 1}`\n    }]);\n    setShowModal(false);\n  };\n  const saveEditedCard = updatedDetails => {\n    // Find the index of the card in the array\n    const cardIndex = cardsInMap.findIndex(card => card.id === currentCard.id);\n\n    // If the card exists\n    if (cardIndex !== -1) {\n      // Create a new array with the updated card details\n      const updatedCards = [...cardsInMap];\n      updatedCards[cardIndex] = {\n        ...updatedCards[cardIndex],\n        ...updatedDetails\n      };\n\n      // Update the state with the new cards array\n      setCardsInMap(updatedCards);\n      setShowModal(false); // Close the modal\n    }\n  };\n  const onEditCard = cardId => {\n    console.log(\"Editing card ID:\", cardId);\n    const cardToEdit = cardsInMap.find(card => card.id === cardId);\n    console.log(\"Found card to edit:\", cardToEdit);\n    if (cardToEdit) {\n      setCurrentCard(cardToEdit);\n      setShowModal(true);\n    }\n  };\n  const stages = ['empathy', 'define', 'ideate', 'prototype', 'test'];\n  const cardsByStage = stage => blankCards.filter(card => card.stage === stage);\n  const columnClasses = {\n    empathy: \"text-primary bg-light\",\n    define: \"text-success bg-light\",\n    ideate: \"text-info bg-light\",\n    prototype: \"text-warning bg-light\",\n    test: \"text-danger bg-light\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        onAddCard: onAddCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 d-flex flex-grow-1 well\",\n        children: [\" \", stages.map(stage => /*#__PURE__*/_jsxDEV(Column, {\n          title: stage,\n          stage: stage,\n          cards: cardsInMap.filter(card => card.stage === stage),\n          onEditCard: onEditCard\n        }, stage, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onHide: () => setShowModal(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: currentCard ? columnClasses[currentCard.stage] : '',\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: currentCard ? `Edit ${currentCard.title} Card` : 'Create Card'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formCardTitle\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: currentCard === null || currentCard === void 0 ? void 0 : currentCard.title,\n              onChange: e => setCurrentCard({\n                ...currentCard,\n                title: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formCardDetails\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 3,\n              value: currentCard === null || currentCard === void 0 ? void 0 : currentCard.details,\n              onChange: e => setCurrentCard({\n                ...currentCard,\n                details: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => currentCard ? saveEditedCard({\n            title: currentCard.title,\n            details: currentCard.details\n          }) : saveNewCard(),\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectMap, \"sSIWFDmZus8dWT5f/0r0U2pCSQk=\");\n_c = ProjectMap;\nexport default ProjectMap;\n\n// Name field in modal, store name on save\n// filter cards based on name\nvar _c;\n$RefreshReg$(_c, \"ProjectMap\");","map":{"version":3,"names":["React","useState","Modal","Button","Form","Sidebar","Column","blankCards","jsxDEV","_jsxDEV","ProjectMap","_s","showModal","setShowModal","currentCard","setCurrentCard","cardsInMap","setCardsInMap","onAddCard","templateCard","id","Date","now","saveNewCard","newCardDetails","length","saveEditedCard","updatedDetails","cardIndex","findIndex","card","updatedCards","onEditCard","cardId","console","log","cardToEdit","find","stages","cardsByStage","stage","filter","columnClasses","empathy","define","ideate","prototype","test","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","title","cards","show","onHide","Header","closeButton","Title","Body","Group","controlId","Label","Control","type","value","onChange","e","target","as","rows","details","Footer","variant","onClick","_c","$RefreshReg$"],"sources":["/Users/eweinberg/Documents/changemaker-maps/src/components/ProjectMap.js"],"sourcesContent":["///src/components/ProjectMap.js\n\n\nimport React, { useState } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport Sidebar from './Sidebar';\nimport Column from './Column';\nimport blankCards from '../util/BlankCards';\n\n\nconst ProjectMap = () => {\n    const [showModal, setShowModal] = useState(false);\n    const [currentCard, setCurrentCard] = useState(null);\n    const [cardsInMap, setCardsInMap] = useState([]);\n  \n    const onAddCard = (templateCard) => {\n        // Assuming templateCard contains the 'stage' and 'title' properties from the clicked card\n        setCurrentCard({ ...templateCard, id: `new-${Date.now()}` }); // Generate a temporary unique ID\n        setShowModal(true);\n      };\n      \n  \n    const saveNewCard = (newCardDetails) => {\n      setCardsInMap([...cardsInMap, { ...currentCard, ...newCardDetails, id: `card-${cardsInMap.length + 1}` }]);\n      setShowModal(false);\n    };\n\n    const saveEditedCard = (updatedDetails) => {\n        // Find the index of the card in the array\n        const cardIndex = cardsInMap.findIndex(card => card.id === currentCard.id);\n        \n        // If the card exists\n        if (cardIndex !== -1) {\n          // Create a new array with the updated card details\n          const updatedCards = [...cardsInMap];\n          updatedCards[cardIndex] = { ...updatedCards[cardIndex], ...updatedDetails };\n      \n          // Update the state with the new cards array\n          setCardsInMap(updatedCards);\n          setShowModal(false); // Close the modal\n        }\n      };\n      \n      const onEditCard = (cardId) => {\n        console.log(\"Editing card ID:\", cardId);\n        const cardToEdit = cardsInMap.find(card => card.id === cardId);\n        console.log(\"Found card to edit:\", cardToEdit);\n        if (cardToEdit) {\n          setCurrentCard(cardToEdit);\n          setShowModal(true);\n        }\n      };\n      \n\n  const stages = ['empathy', 'define', 'ideate', 'prototype', 'test'];\n  const cardsByStage = (stage) => blankCards.filter(card => card.stage === stage);\n  const columnClasses = {\n    empathy: \"text-primary bg-light\",\n    define: \"text-success bg-light\",\n    ideate: \"text-info bg-light\",\n    prototype: \"text-warning bg-light\",\n    test: \"text-danger bg-light\"\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <Sidebar onAddCard={onAddCard} />\n        <div className=\"col-md-10 d-flex flex-grow-1 well\"> {/* Make sure this is flex and can grow */}\n          {stages.map(stage => (\n            <Column key={stage} title={stage} stage={stage} cards={cardsInMap.filter(card => card.stage === stage)} onEditCard={onEditCard}/>\n\n          ))}\n        </div>\n      </div>\n<Modal show={showModal} onHide={() => setShowModal(false)}>\n  <Modal.Header closeButton className={currentCard ? columnClasses[currentCard.stage] : ''}>\n    <Modal.Title>\n      {currentCard ? `Edit ${currentCard.title} Card` : 'Create Card'}\n    </Modal.Title>\n  </Modal.Header>\n  <Modal.Body>\n    <Form>\n      <Form.Group className=\"mb-3\" controlId=\"formCardTitle\">\n        <Form.Label>Title</Form.Label>\n        <Form.Control\n  type=\"text\"\n  value={currentCard?.title}\n  onChange={(e) => setCurrentCard({ ...currentCard, title: e.target.value })}\n/>\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formCardDetails\">\n        <Form.Label>Details</Form.Label>\n        <Form.Control\n  as=\"textarea\"\n  rows={3}\n  value={currentCard?.details}\n  onChange={(e) => setCurrentCard({ ...currentCard, details: e.target.value })}\n/>\n      </Form.Group>\n      </Form>\n  </Modal.Body>\n  <Modal.Footer>\n    <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n      Close\n    </Button>\n    <Button variant=\"primary\" onClick={() => currentCard ? saveEditedCard({ title: currentCard.title, details: currentCard.details }) : saveNewCard()}>\n  Save Changes\n</Button>\n  </Modal.Footer>\n</Modal>\n\n\n\n\n    </div>\n\n    \n  );\n};\n\nexport default ProjectMap;\n\n// Name field in modal, store name on save\n// filter cards based on name"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}