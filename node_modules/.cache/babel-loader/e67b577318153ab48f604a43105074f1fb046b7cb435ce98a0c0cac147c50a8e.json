{"ast":null,"code":"var _jsxFileName = \"/Users/eweinberg/Documents/changemaker-maps/src/components/ProjectMap.js\",\n  _s = $RefreshSig$();\n///src/components/ProjectMap.js\n\nimport React, { useState } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport Sidebar from './Sidebar';\nimport Column from './Column';\nimport blankCards from '../util/BlankCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectMap = () => {\n  _s();\n  const [showModal, setShowModal] = useState(false);\n  const [currentCard, setCurrentCard] = useState(null);\n  const [cardsInMap, setCardsInMap] = useState([]);\n  const onAddCard = templateCard => {\n    // Assuming templateCard contains the 'stage' and 'title' properties from the clicked card\n    setCurrentCard({\n      ...templateCard,\n      id: `new-${Date.now()}`\n    }); // Generate a temporary unique ID\n    setShowModal(true);\n  };\n  const saveNewCard = newCardDetails => {\n    setCardsInMap([...cardsInMap, {\n      ...currentCard,\n      ...newCardDetails,\n      id: `card-${cardsInMap.length + 1}`\n    }]);\n    setShowModal(false);\n  };\n  const onEditCard = cardId => {\n    const cardToEdit = cardsInMap.find(card => card.id === cardId);\n    if (cardToEdit) {\n      setCurrentCard(cardToEdit);\n      setShowModal(true);\n    }\n  };\n  const stages = ['empathy', 'define', 'ideate', 'prototype', 'test'];\n  const cardsByStage = stage => blankCards.filter(card => card.stage === stage);\n  const columnClasses = {\n    empathy: \"text-primary bg-light\",\n    define: \"text-success bg-light\",\n    ideate: \"text-info bg-light\",\n    prototype: \"text-warning bg-light\",\n    test: \"text-danger bg-light\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        onAddCard: onAddCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 d-flex flex-grow-1 well\",\n        children: [\" \", stages.map(stage => /*#__PURE__*/_jsxDEV(Column, {\n          title: stage,\n          stage: stage,\n          cards: cardsInMap.filter(card => card.stage === stage)\n        }, stage, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onHide: () => setShowModal(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: currentCard ? stageClasses[currentCard.stage] : '',\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: currentCard ? `Edit ${currentCard.title} Card` : 'Create Card'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formCardTitle\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter title\",\n              defaultValue: currentCard === null || currentCard === void 0 ? void 0 : currentCard.title,\n              onChange: e => setCurrentCard({\n                ...currentCard,\n                title: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formCardDetails\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 3,\n              placeholder: \"Enter details\",\n              defaultValue: currentCard === null || currentCard === void 0 ? void 0 : currentCard.details,\n              onChange: e => setCurrentCard({\n                ...currentCard,\n                details: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: currentCard ? () => saveEditedCard() : () => saveNewCard(),\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectMap, \"sSIWFDmZus8dWT5f/0r0U2pCSQk=\");\n_c = ProjectMap;\nexport default ProjectMap;\n\n// Name field in modal, store name on save\n// filter cards based on name\nvar _c;\n$RefreshReg$(_c, \"ProjectMap\");","map":{"version":3,"names":["React","useState","Modal","Button","Form","Sidebar","Column","blankCards","jsxDEV","_jsxDEV","ProjectMap","_s","showModal","setShowModal","currentCard","setCurrentCard","cardsInMap","setCardsInMap","onAddCard","templateCard","id","Date","now","saveNewCard","newCardDetails","length","onEditCard","cardId","cardToEdit","find","card","stages","cardsByStage","stage","filter","columnClasses","empathy","define","ideate","prototype","test","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","title","cards","show","onHide","Header","closeButton","stageClasses","Title","Body","Group","controlId","Label","Control","type","placeholder","defaultValue","onChange","e","target","value","as","rows","details","Footer","variant","onClick","saveEditedCard","_c","$RefreshReg$"],"sources":["/Users/eweinberg/Documents/changemaker-maps/src/components/ProjectMap.js"],"sourcesContent":["///src/components/ProjectMap.js\n\n\nimport React, { useState } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport Sidebar from './Sidebar';\nimport Column from './Column';\nimport blankCards from '../util/BlankCards';\n\n\nconst ProjectMap = () => {\n    const [showModal, setShowModal] = useState(false);\n    const [currentCard, setCurrentCard] = useState(null);\n    const [cardsInMap, setCardsInMap] = useState([]);\n  \n    const onAddCard = (templateCard) => {\n        // Assuming templateCard contains the 'stage' and 'title' properties from the clicked card\n        setCurrentCard({ ...templateCard, id: `new-${Date.now()}` }); // Generate a temporary unique ID\n        setShowModal(true);\n      };\n      \n  \n    const saveNewCard = (newCardDetails) => {\n      setCardsInMap([...cardsInMap, { ...currentCard, ...newCardDetails, id: `card-${cardsInMap.length + 1}` }]);\n      setShowModal(false);\n    };\n\n    const onEditCard = (cardId) => {\n        const cardToEdit = cardsInMap.find(card => card.id === cardId);\n        if (cardToEdit) {\n          setCurrentCard(cardToEdit);\n          setShowModal(true);\n        }\n      };\n\n\n  const stages = ['empathy', 'define', 'ideate', 'prototype', 'test'];\n  const cardsByStage = (stage) => blankCards.filter(card => card.stage === stage);\n  const columnClasses = {\n    empathy: \"text-primary bg-light\",\n    define: \"text-success bg-light\",\n    ideate: \"text-info bg-light\",\n    prototype: \"text-warning bg-light\",\n    test: \"text-danger bg-light\"\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <Sidebar onAddCard={onAddCard} />\n        <div className=\"col-md-10 d-flex flex-grow-1 well\"> {/* Make sure this is flex and can grow */}\n          {stages.map(stage => (\n            <Column key={stage} title={stage} stage = {stage} cards={cardsInMap.filter(card => card.stage === stage)} />\n          ))}\n        </div>\n      </div>\n<Modal show={showModal} onHide={() => setShowModal(false)}>\n  <Modal.Header closeButton className={currentCard ? stageClasses[currentCard.stage] : ''}>\n    <Modal.Title>\n      {currentCard ? `Edit ${currentCard.title} Card` : 'Create Card'}\n    </Modal.Title>\n  </Modal.Header>\n  <Modal.Body>\n    <Form>\n      <Form.Group className=\"mb-3\" controlId=\"formCardTitle\">\n        <Form.Label>Title</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Enter title\"\n          defaultValue={currentCard?.title}\n          onChange={(e) => setCurrentCard({ ...currentCard, title: e.target.value })}\n        />\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formCardDetails\">\n        <Form.Label>Details</Form.Label>\n        <Form.Control\n          as=\"textarea\"\n          rows={3}\n          placeholder=\"Enter details\"\n          defaultValue={currentCard?.details}\n          onChange={(e) => setCurrentCard({ ...currentCard, details: e.target.value })}\n        />\n      </Form.Group>\n      </Form>\n  </Modal.Body>\n  <Modal.Footer>\n    <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n      Close\n    </Button>\n    <Button variant=\"primary\" onClick={currentCard ? () => saveEditedCard() : () => saveNewCard()}>\n      Save Changes\n    </Button>\n  </Modal.Footer>\n</Modal>\n\n\n\n\n    </div>\n\n    \n  );\n};\n\nexport default ProjectMap;\n\n// Name field in modal, store name on save\n// filter cards based on name"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}